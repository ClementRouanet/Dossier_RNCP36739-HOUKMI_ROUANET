{
	"jobConfig": {
		"name": "sellers_job",
		"description": "",
		"role": "arn:aws:iam::421189326716:role/glue_grp6",
		"command": "glueetl",
		"version": "4.0",
		"runtime": null,
		"workerType": "G.8X",
		"numberOfWorkers": 2,
		"maxCapacity": 16,
		"jobRunQueuingEnabled": null,
		"maxRetries": 0,
		"timeout": 2880,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "sellers_job.py",
		"scriptLocation": "s3://aws-glue-assets-421189326716-us-east-1/scripts/",
		"language": "python-3",
		"spark": false,
		"sparkConfiguration": "standard",
		"jobParameters": [],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2024-07-03T16:04:06.153Z",
		"developerMode": true,
		"connectionsList": [],
		"temporaryDirectory": "s3://aws-glue-assets-421189326716-us-east-1/temporary/",
		"logging": true,
		"glueHiveMetastore": true,
		"etlAutoTuning": false,
		"metrics": true,
		"observabilityMetrics": true,
		"bookmark": "job-bookmark-disable",
		"sparkPath": "s3://aws-glue-assets-421189326716-us-east-1/sparkHistoryLogs/",
		"flexExecution": false,
		"minFlexWorkers": null,
		"maintenanceWindow": null
	},
	"hasBeenSaved": false,
	"usageProfileName": null,
	"script": "import sys\nfrom awsglue.transforms import *\nfrom awsglue.utils import getResolvedOptions\nfrom pyspark.context import SparkContext\nfrom awsglue.context import GlueContext\nfrom awsglue.job import Job\nfrom awsglue.dynamicframe import DynamicFrame\n\n# Récupération des arguments nécessaires\nargs = getResolvedOptions(sys.argv, ['TempDir', 'JOB_NAME'])\n\n# Initialisation des contextes Spark et Glue\nsc = SparkContext()\nglueContext = GlueContext(sc)\nspark = glueContext.spark_session\njob = Job(glueContext)\njob.init(args['JOB_NAME'], args)\n\n# Lecture des données JSON depuis le catalogue Glue\nread_s3_sellers_json = glueContext.create_dynamic_frame.from_catalog(\n    database=\"raw_data_json\",\n    table_name=\"sellers_json\",\n    transformation_ctx=\"read_s3_sellers_json\"\n)\n\n# Application des mappings\napply_mapping = ApplyMapping.apply(\n    frame=read_s3_sellers_json,\n    mappings=[\n        (\"seller_id\", \"string\", \"seller_id\", \"string\"),\n        (\"seller_address.seller_zip_code\", \"int\", \"seller_zip_code\", \"int\"),\n        (\"seller_address.seller_city\", \"string\", \"seller_city\", \"string\"),\n        (\"seller_address.seller_state\", \"string\", \"seller_state\", \"string\")\n    ],\n    transformation_ctx=\"apply_mapping\"\n)\n\n# Conversion en DynamicFrame\nsellers_dyf = apply_mapping\n\n# Écriture dans DynamoDB\nglueContext.write_dynamic_frame.from_options(\n    frame=sellers_dyf,\n    connection_type=\"dynamodb\",\n    connection_options={\n        \"dynamodb.output.tableName\": \"sellers\",\n        \"dynamodb.throughput.write.percent\": \"1.0\",\n        \"dynamodb.throughput.read.percent\": \"1.0\",\n        \"dynamodb.throughput.write.units\": \"5\",\n        \"dynamodb.throughput.read.units\": \"5\",\n        \"dynamodb.billing.mode\": \"PROVISIONED\",\n        \"dynamodb.input.format\": \"json\",\n        \"dynamodb.output.mode\": \"OVERWRITE\"\n        #\"dynamodb.throughput.write.autoscaling.mode\": \"DISABLED\"\n    }\n)\n\n# Commit du job\njob.commit()"
}